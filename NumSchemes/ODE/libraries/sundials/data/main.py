import sys
import numpy as np
import matplotlib.pyplot as plt
import argparse
import re

colors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:purple', 'tab:grey']

def parse_header(header_line):
    p = re.compile('\S+ \[\S*\]')
    header = []
    while (p.search(header_line)):
        begin, end = p.search(header_line).span()
        header.append(p.search(header_line).group())
        header_line = header_line[end:]
    return header

def read_data(filename, head=False):
    """ Reads data formated in one line header then data.
    The header gives the variables and units in : 
    variable [units] format """
    with open(filename, 'r') as fp:
        header = parse_header(fp.readline().strip())
        data = np.loadtxt(fp)
        if len(data[0, :]) != len(header):
            raise ValueError("Different values of header length and data length")
        indices_sort = np.argsort(data[:, 0])
        for j in range(len(header)):
            data[:, j] = np.array([data[i, j] for i in indices_sort])

    if head:
        return header, data
    else:
        return data
    
def ax_plot(ax, data, label, ls):
    ndim = len(data[0, 1:])
    for i in range(ndim):
        ax.plot(data[:, 0], data[:, i + 1], label=f'{label} $y_{i+1:d}$', 
            color=colors[i], linestyle=ls)

def plot_data(casename, xscale, yscale, figname, exact=None):
    """ Plot data from ODE solution data file generated by Sundials CVODE

    Args:
        casename (str): Name of the case
        xscale (str): 'log' or 'linear'
        yscale (str): 'log' or 'linear'
        figname (str): Name of the figure
        exact (function, optional): Exact solution when there is one. Defaults to None.
    """
    fn = f'{casename}.dat'
    data = read_data(fn)
    fig, ax = plt.subplots()
    ax_plot(ax, data, 'Sim', '-')
    if not exact is None:
        exact_sol = exact(data[:, 0])
        ax_plot(ax, exact_sol, 'Exact', '--')
    ax.legend()
    ax.set_xscale(xscale)
    ax.set_yscale(yscale)
    if yscale == 'log':
        max_value = np.max(data[:, 1:])
        ndecades = 10
        ax.set_ylim([max_value / 10**ndecades, 2 * max_value])
    ax.grid(True)
    fig.savefig(f'{fig_dir}{casename}', bbox_inches='tight')

def exact_example1(t):
    """ 3 dimensional example of exact solution """
    ndata = len(t)
    sol = np.zeros((ndata, 4))
    sol[:, 0] = t
    sol[:, 1] = np.exp(t) * t
    sol[:, 2] = np.exp(t) * (1 - t)
    sol[:, 3] = (t - 1) * np.exp(t)
    return sol

if __name__ == '__main__':
    fig_dir = 'figures/'

    # Canonical chemical problem
    plot_data('cvRobert_dns', 'log', 'log', fig_dir)

    # Exercice problem
    plot_data('cvExample_dns', 'linear', 'linear', fig_dir, exact=exact_example1)